use criterion::{criterion_group, criterion_main, Criterion};
use rug::Integer;
use rust_ev_crypto_primitives::{
    ByteArray, DecodeTrait, HashableMessage, Hexa, RecursiveHashTrait,
};

pub fn recursive_hash_bench(c: &mut Criterion) {
    let mut nl: Vec<HashableMessage> = vec![];
    let bu1 = Integer::from_hexa_string("0x4").unwrap();
    nl.push(HashableMessage::from(&bu1));
    let bu2 = Integer::from_hexa_string(
            "0x3896D05A527747E840CEB0A10454DE39955529297AC4CB21010E9287A21F826FA7221215E1C7EE8362223DF51215A7F4CD14F158980154EE0794B599639A6FBC171A97F376A4DD95945C476F0DC6836FCEA68C9B28F901CE7F30DC03F406947E6245BF741650F5164BFC24F4B23948A5D6642C36D61016E63E943DB9717335EEB04373BFAE10BB4FB20EA9FD1BE48CA9A02B8E8C6639AD8E43D714ED16D4764D258E9A70BABD5497C09E148052C1C6A965F18F71F7B03385178B4991AA790611FA3B98E9C2F1EE1E0369F496A1D6928D718650513439D01898AAB87BC968F76D9DB8089809142A0C79A84C689D02314CEDE64F4C9615B79D49D2BE641BE8D4AB"
        ).unwrap();
    nl.push(HashableMessage::from(&bu2));
    let mut l: Vec<HashableMessage> = vec![];
    l.push(HashableMessage::from("common reference string"));
    let bu3 = Integer::from_hexa_string(
            "0x
        ).unwrap();
    l.push(HashableMessage::from(&bu3));
    let bu4 = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031"
        ).unwrap();
    l.push(HashableMessage::from(&bu4));
    let ba = ByteArray::base64_decode("YcOpYm5zaXRwcSBi").unwrap();
    l.push(HashableMessage::from(&ba));
    l.push(HashableMessage::Composite(nl));
    let value = HashableMessage::from(&l);
    c.bench_function("recursive_hash", |b| {
        b.iter(|| value.recursive_hash().unwrap())
    });
}

criterion_group!(benches, recursive_hash_bench);
criterion_main!(benches);
