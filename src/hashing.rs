// Copyright Â© 2023 Denis Morel

// This program is free software: you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option) any
// later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU Lesser General Public License and
// a copy of the GNU General Public License along with this program. If not, see
// <https://www.gnu.org/licenses/>.

//! Implementation of recursive hash functionality
//!

use crate::{
    basic_crypto_functions::{sha3_256, shake256, BasisCryptoError},
    ByteArray, CutToBitLengthIndexError, Integer, IntegerError, GROUP_PARAMETER_Q_LENGTH,
    SECURITY_STRENGTH,
};
use std::{borrow::Cow, fmt::Debug};
use thiserror::Error;

/// Trait implementing defining an interface for objects implementing a recursive hash function.
///
/// The enum [HashableMessage] implements the trait.
pub trait RecursiveHashTrait {
    type Error;

    /// Try recursive hash
    ///
    /// Return [Self::Error] if an error appears during the calculation
    fn recursive_hash(&self) -> Result<ByteArray, Self::Error>;

    /// Try recursive hash and return a variant HashableMessage::Hashed containing the hashed value
    ///
    /// Return [Self::Error] if an error appears during the calculation
    fn to_hashed_hashable_message(&self) -> Result<HashableMessage<'_>, Self::Error> {
        Ok(HashableMessage::Hashed(self.recursive_hash()?))
    }

    /// Try recursive hash of length: Computes the hash value of multiple inputs to a given bit length
    ///
    /// Return [Self::Error] if an error appears during the calculation
    fn recursive_hash_of_length(&self, length: usize) -> Result<ByteArray, Self::Error>;

    /// Try recursive hash to Zq: Computes the hash value of multiple inputs uniformly into Z_q
    ///
    /// Return [Self::Error] if an error appears during the calculation
    fn recursive_hash_to_zq(&self, q: &Integer) -> Result<Integer, Self::Error>;
}

/// Enum to represent an element that is hashable
///
/// The specifiction of Swiss Post give the list of possible
/// elements that can be hashable.
///
/// To avoid copy of existing elements (and big memory growth), the HashableMessage
/// contains possibly references to data. HashableMessage has the lifetime of the reference.
///
/// For simplification for the consumer, the enum contains the possibility to reference String or &str and the possibility
/// to reference to Integer or usize
///
/// Since [HashableMessage] implements the trait [RecursiveHashTrait], the trait must be used in a client module
/// in order to hash the message.
///
/// Example:
/// ```
/// use rust_ev_crypto_primitives::ByteArray;
/// use rust_ev_crypto_primitives::DecodeTrait;
/// use rust_ev_crypto_primitives::{HashableMessage, RecursiveHashTrait};
/// let r = HashableMessage::from("test string").recursive_hash().unwrap();
/// let expected = ByteArray::base64_decode("m1a11iWW/Tcihy/IChyY51AO8UdZe48f5oRFh7RL+JQ=").unwrap();
/// assert_eq!(r, expected);
/// ```
///
/// In the specification of SwissPost, lists with various types of elements are hashed recursivly. Since Rust doesn't allow simple
/// the use of lists with different elements, the elemets must be first transformed in [HashableMessage] and then put in a [vec].
/// ```
/// use rust_ev_crypto_primitives::{HashableMessage, RecursiveHashTrait};
/// let mut l: Vec<HashableMessage> = vec![];
/// l.push(HashableMessage::from("common reference string"));
/// l.push(HashableMessage::from(&(2 as usize)));
/// HashableMessage::from(l).recursive_hash().unwrap();
/// ```
///
/// If you decide to calculate intermediate hash values, and store the in the message (to avoid big structures),
/// use the variant [HashableMessage::Hashed]
/// ```
/// use rust_ev_crypto_primitives::{HashableMessage, RecursiveHashTrait};
/// let b = HashableMessage::from(2 as usize).recursive_hash().unwrap();
/// let hm = HashableMessage::Hashed(b.clone());
/// assert_eq!(hm.recursive_hash().unwrap(), b);
/// ```

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum HashableMessage<'a> {
    ByteArray(Cow<'a, ByteArray>),
    Integer(Cow<'a, Integer>),
    USize(Cow<'a, usize>),
    String(Cow<'a, str>),
    Composite(Vec<Cow<'a, HashableMessage<'a>>>),
    Hashed(ByteArray),
    HashedOfLength(ByteArray),
}

// Enum representing the error generated by the module [hahsing]
#[derive(Error, Debug)]
pub enum HashError {
    #[error(transparent)]
    HashError(#[from] BasisCryptoError),
    #[error(transparent)]
    CutToBitLengthIndexError(#[from] CutToBitLengthIndexError),
    #[error(transparent)]
    IntegerError(#[from] IntegerError),
    #[error("The value is hashed with {0}, which is wrong")]
    WrongHashed(String),
}

impl HashableMessage<'_> {
    /// Hashable to byte_array accordind the specification of Swiss Post (Algorithm 5.5)
    fn to_hashable_byte_array(&self) -> Result<ByteArray, HashError> {
        match self {
            HashableMessage::ByteArray(b) => Ok(b.new_prepend_byte(0u8)),
            HashableMessage::Integer(i) => Ok(ByteArray::try_from(i.as_ref())
                .map_err(HashError::IntegerError)?
                .new_prepend_byte(1u8)),
            HashableMessage::USize(i) => Ok(ByteArray::from(i.as_ref()).new_prepend_byte(1u8)),
            HashableMessage::String(s) => Ok(ByteArray::from(s.as_ref()).new_prepend_byte(2u8)),
            HashableMessage::Composite(c) => {
                let mut res = ByteArray::from_bytes(b"\x03");
                for e in c.iter() {
                    res.extend(&e.recursive_hash()?);
                }
                Ok(res)
            }
            HashableMessage::Hashed(b) => Ok(b.clone()),
            HashableMessage::HashedOfLength(_) => Err(HashError::WrongHashed(
                "Hashed expected in to_hashable_byte_array".to_string(),
            )),
        }
    }

    /// Hashable to byte_array for "OfLength" accordind the specification of Swiss Post (Algorithm 5.7)
    fn to_hashable_byte_array_of_length(&self, length: usize) -> Result<ByteArray, HashError> {
        match self {
            HashableMessage::ByteArray(b) => Ok(b.new_prepend_byte(0u8)),
            HashableMessage::Integer(i) => Ok(ByteArray::try_from(i.as_ref())
                .map_err(HashError::IntegerError)?
                .new_prepend_byte(1u8)),
            HashableMessage::USize(i) => Ok(ByteArray::from(i.as_ref()).new_prepend_byte(1u8)),
            HashableMessage::String(s) => Ok(ByteArray::from(s.as_ref()).new_prepend_byte(2u8)),
            HashableMessage::Composite(c) => {
                let mut res = ByteArray::from_bytes(b"\x03");
                for e in c.iter() {
                    res.extend(&e.recursive_hash_of_length(length)?);
                }
                Ok(res)
            }
            HashableMessage::Hashed(_) => Err(HashError::WrongHashed(
                "HashedOfLength expected in to_hashable_byte_array_of_length".to_string(),
            )),
            HashableMessage::HashedOfLength(b) => Ok(b.clone()),
        }
    }

    pub fn is_hashed(&self) -> bool {
        matches!(self, HashableMessage::Hashed(_))
            || matches!(self, HashableMessage::HashedOfLength(_))
    }
}

impl RecursiveHashTrait for HashableMessage<'_> {
    type Error = HashError;

    fn recursive_hash(&self) -> Result<ByteArray, HashError> {
        let b = self.to_hashable_byte_array()?;
        Ok(match self.is_hashed() {
            true => b,
            false => sha3_256(&b).map_err(HashError::HashError)?,
        })
    }

    fn recursive_hash_of_length(&self, length: usize) -> Result<ByteArray, HashError> {
        let mut upper_l = length / 8;
        if length % 8 > 0 {
            upper_l += 1;
        }
        let b = self.to_hashable_byte_array_of_length(length)?;
        Ok(match self.is_hashed() {
            true => b,
            false => shake256(&b, upper_l)
                .map_err(HashError::HashError)?
                .cut_bit_length(length)
                .map_err(HashError::CutToBitLengthIndexError)?,
        })
    }

    fn recursive_hash_to_zq(&self, q: &Integer) -> Result<Integer, HashError> {
        let length = GROUP_PARAMETER_Q_LENGTH + 2 * SECURITY_STRENGTH;
        let hashable_q = HashableMessage::from(q.clone());
        let hashable_message = HashableMessage::from("RecursiveHash".to_string());
        //let hash_self = HashableMessage::HashedOfLength(self.recursive_hash_of_length(length)?);
        let mut parameters = vec![&hashable_q, &hashable_message];
        let values = match self {
            HashableMessage::Composite(v) => v
                .iter()
                .map(|e| {
                    e.recursive_hash_of_length(length)
                        .map(HashableMessage::HashedOfLength)
                })
                .collect::<Result<Vec<_>, _>>()?,
            _ => vec![HashableMessage::HashedOfLength(
                self.recursive_hash_of_length(length)?,
            )],
        };
        parameters.extend(values.iter());

        let h_prime = HashableMessage::from(parameters)
            .recursive_hash_of_length(length)?
            .into_integer();
        Ok(h_prime.modulo(q))
    }
}

impl<'a> From<&'a ByteArray> for HashableMessage<'a> {
    fn from(value: &'a ByteArray) -> Self {
        Self::ByteArray(Cow::Borrowed(value))
    }
}

impl From<ByteArray> for HashableMessage<'_> {
    fn from(value: ByteArray) -> Self {
        Self::ByteArray(Cow::Owned(value))
    }
}

impl<'a> From<&'a Integer> for HashableMessage<'a> {
    fn from(value: &'a Integer) -> Self {
        Self::Integer(Cow::Borrowed(value))
    }
}

impl From<Integer> for HashableMessage<'_> {
    fn from(value: Integer) -> Self {
        Self::Integer(Cow::Owned(value))
    }
}

impl<'a> From<&'a usize> for HashableMessage<'a> {
    fn from(value: &'a usize) -> Self {
        Self::USize(Cow::Borrowed(value))
    }
}

impl From<usize> for HashableMessage<'_> {
    fn from(value: usize) -> Self {
        Self::USize(Cow::Owned(value))
    }
}

impl<'a> From<&'a String> for HashableMessage<'a> {
    fn from(value: &'a String) -> Self {
        Self::String(Cow::Borrowed(value))
    }
}

impl From<String> for HashableMessage<'_> {
    fn from(value: String) -> Self {
        Self::String(Cow::Owned(value))
    }
}

impl<'a> From<&'a str> for HashableMessage<'a> {
    fn from(value: &'a str) -> Self {
        Self::String(Cow::Borrowed(value))
    }
}

impl From<bool> for HashableMessage<'_> {
    fn from(value: bool) -> Self {
        match value {
            true => Self::from("true".to_string()),
            false => Self::from("false".to_string()),
        }
    }
}

impl From<Vec<Self>> for HashableMessage<'_> {
    fn from(value: Vec<Self>) -> Self {
        Self::Composite(value.into_iter().map(Cow::Owned).collect::<Vec<_>>())
    }
}
impl<'a> From<&'a Vec<Self>> for HashableMessage<'a> {
    fn from(value: &'a Vec<Self>) -> Self {
        Self::Composite(value.iter().map(Cow::Borrowed).collect::<Vec<_>>())
    }
}

impl<'a> From<Vec<&'a Self>> for HashableMessage<'a> {
    fn from(value: Vec<&'a Self>) -> Self {
        Self::Composite(value.iter().map(|&h| Cow::Borrowed(h)).collect::<Vec<_>>())
    }
}

impl<'a> From<&'a [String]> for HashableMessage<'a> {
    fn from(value: &'a [String]) -> Self {
        Self::from(value.iter().map(Self::from).collect::<Vec<_>>())
    }
}

impl<'a> From<&'a [&'a String]> for HashableMessage<'a> {
    fn from(value: &'a [&'a String]) -> Self {
        Self::from(
            value
                .iter()
                .map(|&s| Self::from(s.as_str()))
                .collect::<Vec<_>>(),
        )
    }
}

impl<'a> From<&'a [ByteArray]> for HashableMessage<'a> {
    fn from(value: &'a [ByteArray]) -> Self {
        Self::from(value.iter().map(Self::from).collect::<Vec<_>>())
    }
}

impl<'a> From<&'a [Integer]> for HashableMessage<'a> {
    fn from(value: &'a [Integer]) -> Self {
        Self::from(value.iter().map(Self::from).collect::<Vec<_>>())
    }
}

impl<'a> From<&'a [&'a Integer]> for HashableMessage<'a> {
    fn from(value: &'a [&'a Integer]) -> Self {
        Self::from(value.iter().map(|&n| Self::from(n)).collect::<Vec<_>>())
    }
}

impl<'a> From<Vec<&'a Integer>> for HashableMessage<'a> {
    fn from(value: Vec<&'a Integer>) -> Self {
        Self::from(
            value
                .iter()
                .map(|n| HashableMessage::from(*n))
                .collect::<Vec<_>>(),
        )
    }
}

impl<'a> From<&'a [usize]> for HashableMessage<'a> {
    fn from(value: &'a [usize]) -> Self {
        Self::from(value.iter().map(HashableMessage::from).collect::<Vec<_>>())
    }
}

impl<'a> From<&'a [Vec<Integer>]> for HashableMessage<'a> {
    fn from(value: &'a [Vec<Integer>]) -> Self {
        Self::from(
            value
                .iter()
                .map(|v| Self::from(v.as_slice()))
                .collect::<Vec<_>>(),
        )
    }
}

impl<'a> From<&'a [Vec<usize>]> for HashableMessage<'a> {
    fn from(value: &'a [Vec<usize>]) -> Self {
        Self::from(
            value
                .iter()
                .map(|v| Self::from(v.as_slice()))
                .collect::<Vec<_>>(),
        )
    }
}

impl<'a> From<&'a [Vec<String>]> for HashableMessage<'a> {
    fn from(value: &'a [Vec<String>]) -> Self {
        Self::from(
            value
                .iter()
                .map(|v| Self::from(v.as_slice()))
                .collect::<Vec<_>>(),
        )
    }
}

#[cfg(test)]
mod test {
    use super::super::{byte_array::DecodeTrait, integer::Hexa};
    use super::*;

    #[test]
    fn test_simple_byte_array() {
        let b = ByteArray::base64_decode(
            "t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaDssbzSibBsu/6iGtCOGEfz9zeNVs7ZRkDW7w09N75p0AYw=="
        ).unwrap();
        let r = HashableMessage::from(&b).recursive_hash().unwrap();
        let e = ByteArray::base64_decode("0SHVZ9hTTmR+NRhanLPF/qPg3NmQbXyAzLYw9QVxYOg=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_integer() {
        let i = Integer::from_hexa_string(
            "0x
        ).unwrap();
        let r = HashableMessage::from(&i).recursive_hash().unwrap();
        let e = ByteArray::base64_decode("YXHR0NvojiUMGz7RCTcO48ZQ1uqRtS64goB6XMFW01E=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_string() {
        let s = "test string".to_string();
        let r = HashableMessage::from(&s).recursive_hash().unwrap();
        let e = ByteArray::base64_decode("m1a11iWW/Tcihy/IChyY51AO8UdZe48f5oRFh7RL+JQ=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_str() {
        let r = HashableMessage::from("test string")
            .recursive_hash()
            .unwrap();
        let e = ByteArray::base64_decode("m1a11iWW/Tcihy/IChyY51AO8UdZe48f5oRFh7RL+JQ=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_integer_list() {
        let inputs = [
            "0x41AFF17DA7F61150FCBC221E26D5BBEC1F540A3A3F13106FB45EB0E7C330C108AB338C525220A1D2D20EB77C642E7F360879A7B42BD2D191891F5A8CDBE7858407A7E7945A3518B0CC89A05BD3A61FD08235E0608F0AD678A99A385A668953A5591778CEBFCC8E3AF6F60DBA277320A58423FA436BEAACDEE2D5A2CDE86060BA8CF5BE70C4418E67B27FFEB96742FE6546C0ED533191B78BF88C8605D9ACF212016CB1735B1EC2ECC1491B73B82A5B348DB70A87FE0199899658CCD198CC53C7DD774D386A44867BB65EFF6704A6DD14AD462B13847B932FE4258C70F5FC20996FD9B2093EC0FD849070B5DDDDF741B8DFEFB972CFFE3A91E778CBEDE3A9CE1D",
            "0x35E854073500849CB2807B093D5F86176533B04DD81309D771A6461064E4A6E2B7F464D0502E9F2E2F5AD7AB4E225025E65A98CEEE2906C86158E7C432C4F50A149CD31A6C17CA1A000EC879B5CC0EF8E825EF8B83D4111D8AB59FCAB34694F112F5D3C2527F9121A50C95D975D3653972A9F17BFFBA26D542508EC57274202CCFF787EBC5E2E89F3EBEBFF17419B9338D47BF745901BE43D4A132FC503C9D07D7C3D3C35D303CD86C0F44B138E116CAA72B2DEFDA6D56BE841B980732EAE986710882143DAE385EE1832487F824A7AB404DFDFA903BEBDFC7682CE8D08F77B37E3B0AB99F40CAC2BA0EE8B6F64DE4BA3568A22359B114AE560656B8F59D0357",
            "0x
        ];
        let bis: Vec<Integer> = inputs
            .iter()
            .map(|e| Integer::from_hexa_string(e).unwrap())
            .collect();
        let r = HashableMessage::from(bis.as_slice())
            .recursive_hash()
            .unwrap();
        let e = ByteArray::base64_decode("Qn1sWr2uZ87jwjeEoJa9zS6dc6S92oC0X83yxpyv2ZA=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_integer_list_len1() {
        let inputs = [
            "0xA4D9B0B481FB03073E4B3EEE862FA2AA667AED37DD201FF41F786166C98D01AB3CEED0249FA1F12F23DEF203A98C53A294F5DE1A54A98EAA36F7232336FDFE89F28AD86789BCB67B5E41AFF9CE6EE5639A12B763D2A170E0B8208838079A622B11FC7DCDAC3DE178803E767028FEB607C2954834A8A53B400894E2CF7591D9E68CB987D2B5F05C5A799A38A513E53C451E6DF746C5C32FBAFE9AED6B8A1722AC15D40F1CA1DAC5F058618829514811F13516A18A4142D1B69830803A4910A89A5938491F75AFE9C07AC138CCB9B548814794A7B5A6E4F22CD2365FED5011A1E7DD26955958C8A9FCDEE31B9C6AABB6B50CC8E595144F4CCCAFFC74656DA135E3",
        ];
        let bis: Vec<Integer> = inputs
            .iter()
            .map(|e| Integer::from_hexa_string(e).unwrap())
            .collect();
        let r = HashableMessage::from(bis.as_slice())
            .recursive_hash()
            .unwrap();
        let e = ByteArray::base64_decode("+e9LVZg0L5uHLbnUv8pIVVm28y+QZMtfG1edAFx2oPM=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_mix_content() {
        let mut l: Vec<HashableMessage> = vec![];
        l.push(HashableMessage::from("common reference string"));
        let bi1 = Integer::from_hexa_string(
            "0x
        ).unwrap();
        l.push(HashableMessage::from(&bi1));
        let bi2 = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031"
        ).unwrap();
        l.push(HashableMessage::from(&bi2));
        let ba = ByteArray::base64_decode("YcOpYm5zaXRwcSBi").unwrap();
        l.push(HashableMessage::from(&ba));
        let r = HashableMessage::from(l).recursive_hash().unwrap();
        let e = ByteArray::base64_decode("rHGUCWqWKTj9KBY3GgSeNEXZfraTDK+ZGIhlSxpVs5c=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_mixed_content_nested() {
        let mut nl: Vec<HashableMessage> = vec![];
        let bu1 = Integer::from_hexa_string("0x4").unwrap();
        nl.push(HashableMessage::from(&bu1));
        let bu2 = Integer::from_hexa_string(
            "0x3896D05A527747E840CEB0A10454DE39955529297AC4CB21010E9287A21F826FA7221215E1C7EE8362223DF51215A7F4CD14F158980154EE0794B599639A6FBC171A97F376A4DD95945C476F0DC6836FCEA68C9B28F901CE7F30DC03F406947E6245BF741650F5164BFC24F4B23948A5D6642C36D61016E63E943DB9717335EEB04373BFAE10BB4FB20EA9FD1BE48CA9A02B8E8C6639AD8E43D714ED16D4764D258E9A70BABD5497C09E148052C1C6A965F18F71F7B03385178B4991AA790611FA3B98E9C2F1EE1E0369F496A1D6928D718650513439D01898AAB87BC968F76D9DB8089809142A0C79A84C689D02314CEDE64F4C9615B79D49D2BE641BE8D4AB"
        ).unwrap();
        nl.push(HashableMessage::from(&bu2));
        let mut l: Vec<HashableMessage> = vec![];
        l.push(HashableMessage::from("common reference string"));
        let bu3 = Integer::from_hexa_string(
            "0x
        ).unwrap();
        l.push(HashableMessage::from(&bu3));
        let bu4 = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031"
        ).unwrap();
        l.push(HashableMessage::from(&bu4));
        let ba = ByteArray::base64_decode("YcOpYm5zaXRwcSBi").unwrap();
        l.push(HashableMessage::from(&ba));
        l.push(HashableMessage::from(nl));
        let r = HashableMessage::from(l).recursive_hash().unwrap();
        let e = ByteArray::base64_decode("HYq9bWhqsm+/Sh8omWJGg2om5sQ2zosPIEhaIQ2m9GE=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_mixed_content_nested2() {
        let mut nl: Vec<HashableMessage> = vec![];
        let n = 4;
        nl.push(HashableMessage::from(&n));
        let bu2 = Integer::from_hexa_string(
            "0x3896D05A527747E840CEB0A10454DE39955529297AC4CB21010E9287A21F826FA7221215E1C7EE8362223DF51215A7F4CD14F158980154EE0794B599639A6FBC171A97F376A4DD95945C476F0DC6836FCEA68C9B28F901CE7F30DC03F406947E6245BF741650F5164BFC24F4B23948A5D6642C36D61016E63E943DB9717335EEB04373BFAE10BB4FB20EA9FD1BE48CA9A02B8E8C6639AD8E43D714ED16D4764D258E9A70BABD5497C09E148052C1C6A965F18F71F7B03385178B4991AA790611FA3B98E9C2F1EE1E0369F496A1D6928D718650513439D01898AAB87BC968F76D9DB8089809142A0C79A84C689D02314CEDE64F4C9615B79D49D2BE641BE8D4AB"
        ).unwrap();
        nl.push(HashableMessage::from(&bu2));
        let mut l: Vec<HashableMessage> = vec![];
        l.push(HashableMessage::from("common reference string"));
        let bu3 = Integer::from_hexa_string(
            "0x
        ).unwrap();
        l.push(HashableMessage::from(&bu3));
        let bu4 = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031"
        ).unwrap();
        l.push(HashableMessage::from(&bu4));
        let ba = ByteArray::base64_decode("YcOpYm5zaXRwcSBi").unwrap();
        l.push(HashableMessage::from(&ba));
        l.push(HashableMessage::from(nl));
        let r = HashableMessage::from(l).recursive_hash().unwrap();
        let e = ByteArray::base64_decode("HYq9bWhqsm+/Sh8omWJGg2om5sQ2zosPIEhaIQ2m9GE=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_hashed() {
        let mut nl: Vec<HashableMessage> = vec![];
        let bu1 = Integer::from_hexa_string("0x4").unwrap();
        nl.push(HashableMessage::Hashed(
            HashableMessage::from(&bu1).recursive_hash().unwrap(),
        ));
        let bu2 = Integer::from_hexa_string(
            "0x3896D05A527747E840CEB0A10454DE39955529297AC4CB21010E9287A21F826FA7221215E1C7EE8362223DF51215A7F4CD14F158980154EE0794B599639A6FBC171A97F376A4DD95945C476F0DC6836FCEA68C9B28F901CE7F30DC03F406947E6245BF741650F5164BFC24F4B23948A5D6642C36D61016E63E943DB9717335EEB04373BFAE10BB4FB20EA9FD1BE48CA9A02B8E8C6639AD8E43D714ED16D4764D258E9A70BABD5497C09E148052C1C6A965F18F71F7B03385178B4991AA790611FA3B98E9C2F1EE1E0369F496A1D6928D718650513439D01898AAB87BC968F76D9DB8089809142A0C79A84C689D02314CEDE64F4C9615B79D49D2BE641BE8D4AB"
        ).unwrap();
        nl.push(HashableMessage::from(&bu2));
        let mut l: Vec<HashableMessage> = vec![];
        l.push(HashableMessage::from("common reference string"));
        let bu3 = Integer::from_hexa_string(
            "0x
        ).unwrap();
        l.push(HashableMessage::from(&bu3));
        let bu4 = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031"
        ).unwrap();
        l.push(HashableMessage::from(&bu4));
        let ba = ByteArray::base64_decode("YcOpYm5zaXRwcSBi").unwrap();
        l.push(HashableMessage::from(&ba));
        l.push(HashableMessage::from(nl));
        let r = HashableMessage::from(l).recursive_hash().unwrap();
        let e = ByteArray::base64_decode("HYq9bWhqsm+/Sh8omWJGg2om5sQ2zosPIEhaIQ2m9GE=").unwrap();
        assert_eq!(r, e);
    }

    #[test]
    fn test_vec_vec_integer() {
        let data = vec![
            vec![Integer::from(2u8)],
            vec![Integer::from(3u8), Integer::from(4u8)],
            vec![Integer::from(5u8)],
        ];
        let mut res: Vec<HashableMessage> = vec![];
        let v1 = vec![Integer::from(2u8)];
        let v2 = vec![Integer::from(3u8), Integer::from(4u8)];
        let v3 = vec![Integer::from(5u8)];
        res.push(HashableMessage::from(v1.as_slice()));
        res.push(HashableMessage::from(v2.as_slice()));
        res.push(HashableMessage::from(v3.as_slice()));
        assert_eq!(
            HashableMessage::from(data.as_slice()),
            HashableMessage::from(res)
        )
    }

    #[test]
    fn test_zq_string() {
        let q = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B"
        ).unwrap();
        let s = "test string".to_string();
        let r = HashableMessage::from(&s).recursive_hash_to_zq(&q).unwrap();
        let e = Integer::from_hexa_string(
            "0x687EF94C9F5D22F5547A017BB693FE7A2B655AD995EB29B03729BE8F7649EFBA67BC64450362B3F02A19D9868658546D627D348D490FBCC523C735B0BAC53486C740EFB0D1F63163A644C611938F8F7572210AE04A4C6873FADC80A40A55180EC0043B3FD0F787190406FF0277BEF5C1D4BBCE921865183465BDE79CBAE939AAA6C961BCDAD0DAEC05D270C1BC37EF770D002B9E1E7528191882D736E2772ACE46BB0741C11A44EE062CDC9A43265DA47A7C6CFB32256707F2F82B9A4B9E7942E780A17DCDDC7153851F65AC269FE9F0751F526093CB5A84A640B6409FCD52F9D08331AF68A8AC38C9B2A607E6D7BFE7E49CBBA2275B9D27CC81C4EBC9FF67FAE4B3AA5BC5DAE2751F2539B9971FBD1D9A5A78E0EE2AFBC870E4F2037580887024AB53CF66996852507DBF1CCD06B0B2309F10F8031E8EF23D5225717FC78E118E01383E6222CCE26EFD7EB516D75AC9F8F1585FF19C5A540D36E94187CDC167E60767EF8851B15A327FD71DCF05D97D22958B8FD4DC47019C44BF400DB689C"
        ).unwrap();
        assert_eq!(r, e)
    }

    #[test]
    fn test_zq_bytearray() {
        let q = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B"
        ).unwrap();
        let s = ByteArray::base64_decode("q83vASNFZ4k=").unwrap();
        let r = HashableMessage::from(&s).recursive_hash_to_zq(&q).unwrap();
        let e = Integer::from_hexa_string(
            "0x384A8B51CBB6A6B5A7475AF118698633368E65349C00C2170D98DF51155942805F6CD42F5EAA6E71D952D090BD9A14846B5772D1360ABBD478BEBC306255FDDAD04082957FB4C04D8C1BBB17107DE5ACC5E456F834E01B562FBCDC5A961B52442F81BD3BEBF5C33229202425CDD36609012F7ECA22FAF45962DB0DF27764C7A7114EAFA2C054501DC5FECD01A1E40A54CCE52BABEFB86C398C8B4D913CCC977F5086A53784976B9A2FDC5B14AB5650630D1F00B2E5DB31404EBA7077EF8D028EE73D0A78BA8E5F482FDD364B28D68DB1641EDB18728156BF8018FF8DBAB45B068E599B4758E6B63C390FA5D4B307C64C8CD44A2D788BD76E0DC0DEECA0CDDDF760CAC77B90AE99FC13AAEDDCAA3053DBAF086B31DAA493D49409C373B796F0330A41ED5F7265BE2E3ED998F9E1B846E76E12DDF6DB2D2F1A161B65F92F19DBE8DA0DAFA61A16EAF8774D61DE2B8489B3644F43D0D16FBCAE73787ECD5A3E4AFCD761DF11351A03A158889E4E360187627CA1D76224CE53E502D86C8420C2ABBD"
        ).unwrap();
        assert_eq!(r, e)
    }

    #[test]
    fn test_zq_integer() {
        let q = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B"
        ).unwrap();
        let s = Integer::from_hexa_string(
            "0x
        ).unwrap();
        let r = HashableMessage::from(&s).recursive_hash_to_zq(&q).unwrap();
        let e = Integer::from_hexa_string(
            "0x54A8D780AFDEEA94AB69D8BE217D75F3EE504AA35E2315451B0B1628D40577932845754774D443E390FEAE84C1E23F9CDE749CDE420923AE79B9E2FD588BC8A6A49C4FB1C4A360C6FD8BFFF387C76D84E52F0F3F990F43E7F92E3A90BE6A0972CE71CC62B41A900752BC4747F3E9F2E3B0855EA31EE31D0B475C296B49B70D37A1A07E66DF9B26A68EDF2B2A9AFCE721785BA76BAA4CB2806547573C53FFE8BA9862F0D8A07DBC7D8761BEFF5E6542C5EC94ECF954628DF01161FD4AA735356FA3F3C6442C240E6F348184C078C6B104E90D83D1567A847C7CD1F06D856534DDCC7CE91EE2D946ED0E1BD24C73F599766FBC0A0779BCD739D4EA3A950058CB2383367D13F7DA3965D26E6243A04C132867D52905B1FBC8240CAFEDF2F357DDD68B8D210224D6E13AE379BAFA144FB6F4ABD9083B4B10AD8936AC671B6BFF75B96A8733E8F36836AF695EED60722AD5C98D9C62CB3EE3DA580DBD15441A03FAB53F2DF2D589598F5B42E2C8044C3A2B51DE6192ED6ABBA919B6B7AB5A3085CADB"
        ).unwrap();
        assert_eq!(r, e)
    }

    #[test]
    fn test_zq_mixed_content() {
        let q = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B"
        ).unwrap();
        let v = vec![
            HashableMessage::from("test string".to_string()),
            HashableMessage::from(ByteArray::base64_decode("q83vASNFZ4k=").unwrap()),
            HashableMessage::from(
                Integer::from_hexa_string(
                    "0x12956ABFFD9522888502E77884C7DF9D659BF4F93D908E01E04B56693E7A73D75AB513F16F805F70FE3D20404273E4E1611893C682EA1AE50E1C56A83F6ECC1A8580AE96568CD7412B6D70F9B1979CF52CAD3D2DDD9BCF8C3DB027E1E0B316B0B94D753CADC38F179888365382964006CF4EF543FDE8C2A4F138933502A250E98D0B13B871EE046E8A4656D2C5563A910E613D603E3A5DEFC941062530C0B0F02DBA35C1CEE7FF33E62E617B20BAC3499E33BA66BAC64A4D5EB63683089781BA0ECF82557164535ECDC8E26FE104ECF458D81BD25D55FB12B533B940C73D36F903FD4A5993A7535C62B00E2886816BB642F832D98DE8081853979652476331E52EB5FB9BC62081121748896623638FA4F5397FB1B203774F247B4A7A6350A671B2AE37CBCAC931DE417047E38C2218BD8EC4909E7D41B30A5D5E9C9788A7E866FA5FFAB69E0E815BFFB3F244503DE422F962B61C6881FFC3A4D027C4C1C4F285CAD46C6B4F25D2DCA2D81316E9C86623E5C71C56C0BDCC9C9C8E074BC5A3B746"
                ).unwrap()
            )
        ];
        let r = HashableMessage::from(&v).recursive_hash_to_zq(&q).unwrap();
        let e = Integer::from_hexa_string(
            "0x
        ).unwrap();
        assert_eq!(r, e)
    }

    #[test]
    fn test_zq_nested_mixed_content() {
        let q = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B"
        ).unwrap();
        let s = vec![
            HashableMessage::from("test string".to_string()),
            HashableMessage::from(
                vec![
                    HashableMessage::from(ByteArray::base64_decode("q83vASNFZ4k=").unwrap()),
                    HashableMessage::from(
                        Integer::from_hexa_string(
                            "0x43282C01643696786C02BC07DB19F85AC1DE028C369F330C433D2854359DCA2960FD592CB2A73681BFB042F82718A802A96A56E089F716B50E425B1113B00A4DCDFE46478F5C8EDF971A999EEDB139BD321665247DC35DFA73D534F8E09FCB1BEF3F9801EEF06B5427735ECF2D1C0A790BCD33430CD215B1A9A68AE19C43BA6F643D1110CFC3990C64834629908565779EAE1268C00DAE10DB7E8D5D07CB1C235F55ADA28C09DF0BF5242DF2D2843792CC79BA1C429992F0BE7D13D4C178646046A9BF8AFCA94E6F18E1B1297BD9F2301C16BF956150E89741C5691346B5AD1B8CFEA1E8B7E35FFD46211FC869A51CEEDDEF8E9716EB3FB6738AA3DF080462EAFA0077863479E97B8EF49D1C8DD7CC1EACCF5797D37B342CE998F59C7CECE6B03DED01726286436C911FCE6B13F6BF4C2AE77F9EE501667B6F21E23AA2B636C9794790C4860DC8AE088109C083CCE605F16509ADF978B10C817DD42B0F5595AE5EAAD18235779EB887E2C410EA24E259B574384BD0F7889002C719F2E831AB83"
                        ).unwrap()
                    )
                ]
            )
        ];
        let r = HashableMessage::from(&s).recursive_hash_to_zq(&q).unwrap();
        let e = Integer::from_hexa_string(
            "0x1674E16AA33640F120B61D420DDF2CD8608B0E45815467C897E42BCBBE3EC864351DA4AF6AAC9A1DBC79D5CD475D1A189A8632431F6754D75DCE3B063C3F0DB7A85266927559A480F04A86A6DB7778EB5DFBBEC459C865EF19B1D3C2CA7B6CEAFFC6F7B2183BD70AED9A053C3B0CBDC118BED8CB163EDE885A62E130B78C6EF2D0C4C8DCE46AB123F9225008953A299DAD05A5DE12431DB812C3FD6597751F6C5BB02E6C193EA6900DB682DF51F86E8D08E08EB362B3859CC0401205AA53FE9A2156B1B70D365C7168B26B3957BBBAEC976E878E4EB2937679391416D815EAAC2AB916063AB550F76CC3066772640CFAAB0DDD9393AC67B12605D5EB0792818478251891A1D75FD56CE8F3B68E5165A6BDA2ECCC5E09734359BC36BA6055308D5AA059EF1C7DAED51CE28ACAB30CD8BB5B94B0D69A87A1B90C5D26A8693083B80475B3857AF06C58EC5013804AC7EA57AAA16D4E474AC3B4F4EBBC6C5766CC20B130F23AE29D1E352E2B6E86083C11BA50FFF1770452AC11058FD7854408F3C5"
        ).unwrap();
        assert_eq!(r, e)
    }
}
