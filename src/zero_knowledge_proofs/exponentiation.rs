// Copyright Â© 2023 Denis Morel

// This program is free software: you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option) any
// later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU Lesser General Public License and
// a copy of the GNU General Public License along with this program. If not, see
// <https://www.gnu.org/licenses/>.

use crate::{
    elgamal::{EncryptionParameterDomainError, EncryptionParameters},
    integer::ModExponentiateError,
    number_theory::{QuadraticResidueError, QuadraticResidueTrait},
    HashError, HashableMessage, Integer, IntegerOperationError, OperationsTrait,
    RecursiveHashTrait, VerifyDomainTrait,
};
use std::iter::zip;
use thiserror::Error;

#[derive(Error, Debug)]
#[error(transparent)]
/// Error during exponentiation proofs
pub struct ExponentiationProofError(#[from] ExponentiationProofErrorRepr);

#[derive(Error, Debug)]
pub enum PhiExpError {
    #[error("Error calculating g^x mod p")]
    GExpXModP { source: ModExponentiateError },
}

#[derive(Error, Debug)]
#[allow(clippy::enum_variant_names)]
enum ExponentiationProofErrorRepr {
    #[error("Error checking the elgamal parameters")]
    CheckElgamal(Vec<EncryptionParameterDomainError>),
    #[error("The list {0} must have the same length as the list {1}")]
    CheckListSameSize(String, String),
    #[error("{name} is not qudartic residue at position {pos}")]
    NotQuadraticResidueList {
        name: &'static str,
        pos: usize,
        source: QuadraticResidueError,
    },
    #[error("Error Compute Phi Exponentiation")]
    PhiExpError {
        #[from]
        source: PhiExpError,
    },
    #[error("Error hashing e'")]
    EPrimeHash { source: HashError },
    #[error("Error in y^e mod p claculting cs'")]
    YExpEModP { source: ModExponentiateError },
    #[error("Error in v^(-1) mod p claculting cs'")]
    InverseVModP { source: IntegerOperationError },
}

/// Compute phi exponation according to specifications of Swiss Post (Algorithm 10.7)
fn compute_phi_exponentiation(
    ep: &EncryptionParameters,
    x: &Integer,
    gs: &[&Integer],
) -> Result<Vec<Integer>, PhiExpError> {
    gs.iter()
        .map(|g| {
            g.mod_exponentiate(x, ep.p())
                .map_err(|e| PhiExpError::GExpXModP { source: e })
        })
        .collect::<Result<Vec<_>, _>>()
}

/// Verify Exponation proof according to specifications of Swiss Post (Algorithm 10.9)
///
/// # Error
/// Return an error if preconditions are not satisfied
pub fn verify_exponentiation(
    ep: &EncryptionParameters,
    gs: &[&Integer],
    ys: &[&Integer],
    (e, z): (&Integer, &Integer),
    i_aux: &Vec<String>,
) -> Result<bool, ExponentiationProofError> {
    verify_exponentiation_impl(ep, gs, ys, (e, z), i_aux).map_err(ExponentiationProofError::from)
}

fn verify_exponentiation_impl(
    ep: &EncryptionParameters,
    gs: &[&Integer],
    ys: &[&Integer],
    (e, z): (&Integer, &Integer),
    i_aux: &Vec<String>,
) -> Result<bool, ExponentiationProofErrorRepr> {
    // Check of input parameters
    if cfg!(feature = "checks") {
        let domain_errs = ep.verifiy_domain();
        if !domain_errs.is_empty() {
            return Err(ExponentiationProofErrorRepr::CheckElgamal(domain_errs));
        }
        if gs.len() != ys.len() {
            return Err(ExponentiationProofErrorRepr::CheckListSameSize(
                "gs".to_string(),
                "ys".to_string(),
            ));
        }
        for (pos, g) in gs.iter().enumerate() {
            g.result_is_quadratic_residue_unchecked(ep.p())
                .map_err(|e| ExponentiationProofErrorRepr::NotQuadraticResidueList {
                    pos,
                    name: "g",
                    source: e,
                })?;
        }
        for (pos, y) in ys.iter().enumerate() {
            y.result_is_quadratic_residue_unchecked(ep.p())
                .map_err(|e| ExponentiationProofErrorRepr::NotQuadraticResidueList {
                    pos,
                    name: "y",
                    source: e,
                })?;
        }
    }

    let xs = compute_phi_exponentiation(ep, z, gs)?;
    let f_list = vec![
        HashableMessage::from(ep.p()),
        HashableMessage::from(ep.q()),
        HashableMessage::from(
            gs.iter()
                .map(|g| HashableMessage::from(*g))
                .collect::<Vec<_>>(),
        ),
    ];
    let f = HashableMessage::from(&f_list);
    let c_prime_s = zip(&xs, ys)
        .map(|(x, y)| {
            y.mod_exponentiate(e, ep.p())
                .map_err(|e| ExponentiationProofErrorRepr::YExpEModP { source: e })
                .and_then(|v| {
                    v.mod_inverse(ep.p())
                        .map_err(|e| ExponentiationProofErrorRepr::InverseVModP { source: e })
                })
                .map(|v| x.mod_multiply(&v, ep.p()))
        })
        //.map(|(x, y)| x.mod_multiply(&y.mod_exponentiate(e, ep.p()).mod_inverse(ep.p()), ep.p()))
        .collect::<Result<Vec<_>, _>>()?;
    let mut h_aux_l: Vec<HashableMessage> = vec![];
    h_aux_l.push(HashableMessage::from("ExponentiationProof"));
    if !i_aux.is_empty() {
        h_aux_l.push(HashableMessage::from(i_aux.as_slice()));
    }
    let h_aux = HashableMessage::from(&h_aux_l);
    let l_final: Vec<HashableMessage> = vec![
        f,
        HashableMessage::from(
            ys.iter()
                .map(|y| HashableMessage::from(*y))
                .collect::<Vec<_>>(),
        ),
        HashableMessage::from(c_prime_s.as_slice()),
        h_aux,
    ];
    let e_prime = HashableMessage::from(&l_final)
        .recursive_hash()
        .map_err(|e| ExponentiationProofErrorRepr::EPrimeHash { source: e })?
        .into_integer();
    Ok(&e_prime == e)
}

#[cfg(test)]
mod test {
    use crate::Hexa;

    use super::*;

    #[test]
    fn test_verify_exp_3072() {
        let p = Integer::from_hexa_string(
            "0x
        ).unwrap();
        let q = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B"
        ).unwrap();
        let g = Integer::from_hexa_string("0x4").unwrap();
        let bases = [
            "0xA346BC3A7D319925E84488E25F0003AD86C3C331A33E818F68DE307EFEBA49A32134BCD7CA50CCCF46C5517AD2927F5423F5A57FF152F4601AA527BD8CC82878A76A8637BADCDF211175D6AD7A029399AEC09A525EC37E9E7702FC361D39A83D0DA1657E4B8168D39D6757EFA46F8BE119C15C5F003D5720919E3A1DEDA298A963A6247228F616E711FCEE80596C410C7AC532A4699383DC2D158D14C8B83F716CACF067EFACF4B6EA020FF0AEE31B9C000DE3EDAFB7AF844BF4EB7B4452CD26DD4BE7E1C37F820B00142412AD3C57843000B055DD4E78F84C2D32ABE3024F7A761675F4F971FF56378104B67F1479D13562FB20A601CACBED7E94E6A2CE483B2D425D1612B18F7F57327DDCE2F55A23683E66FEF84450B20D8D518285C4FB558A11483D73335357746C3297A0C2C6725508EC4F313637EABF2E6C817A7647C31C731861DAC2AF2083B0A2A584286233AF739C6896F6983403FBDEA8F731B221DBCFEB971FCE25D49735788AD0535DE4584DE74A75696C50CEB5F8CEC0D190FA",
        ];
        let gs: Vec<Integer> = bases
            .iter()
            .map(|e| Integer::from_hexa_string(e).unwrap())
            .collect();
        let statement = [
            "0x2F388A9C6987D0E4DCC04CEBD8312F637918883CB8777C8DFE5733C2383377CA2278BF22463F68D8F9CE1EB5CF09AC5DFA49B2D267BD7E1F1EC8A4DC6ADBC5FFBB9070FB90BD33E0D51F747C715F26C056CB8CE8A63522DA7D99D2F14217DEEA583D371B677EDCE5F7FF3C0A1F5B80FAD3CA8580D373D47D316D2713C3809E8DD82DD08DC4D808B59B65DF78E137275992A571D1CE23B83B4DB16A3E22CF46C4F20FC63FD2CDAC8990F43C33A07F9C831CA8E9F1A103E5F2F5CB88EA8C3D4B95DD5C57FA8B8CAFDCCC02F5BAE08076B0ED61A033469844CB6055A0F319E643F129B16767F4F8643863E071847F89F42E2F7E9D266DBA1072F614DA82D3F7C3ECFFED63679AEC0682AB563DC648E7513B4D40E3BA5659E6F41DA52EF1A167C927494504A4E27EF792369F9F10DB834AC63470AC610364B077CE93F939B5E8979DFC97001980E5AE28C2A1EFBE9AC063F60C8F90CD54CD17E3B99D817B5135A0912D8850EB5DE3FB6D019833042C815A53141C1FFDCC909B2245C2336497F4C1F6",
        ];
        let ys: Vec<Integer> = statement
            .iter()
            .map(|e| Integer::from_hexa_string(e).unwrap())
            .collect();
        let e = Integer::from_hexa_string(
            "0x5636744690A3B23308800A82E1C482C873B13A760153EF28F7DB42B3ACE49303",
        )
        .unwrap();
        let z = Integer::from_hexa_string(
            "0x
        ).unwrap();
        let add_info: Vec<String> = vec!["test-0".to_string()];
        assert!(verify_exponentiation(
            &EncryptionParameters::from((&p, &q, &g)),
            gs.iter().collect::<Vec<_>>().as_slice(),
            ys.iter().collect::<Vec<_>>().as_slice(),
            (&e, &z),
            &add_info
        )
        .unwrap())
    }

    #[test]
    fn test_verify_exp_3072_2() {
        let p = Integer::from_hexa_string(
            "0x
        ).unwrap();
        let q = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B"
        ).unwrap();
        let g = Integer::from_hexa_string("0x4").unwrap();
        let bases = [
            "0x19D43DDD760D53E144289FE63826030B25DEA1BBA1CA04A75976CD0E81460D2A31FE17A50763E72FB756DFBCEA4E850FFE3E1AB12E75A1774A723FA745AB2025BB21662F3D967796068A23F3BB550AE2AEFE2B674F58D61427EFB3F75842AB5F46DD7ADC02570800CC958282FCFF597AEF9B9F4E64EC6A937C45A19BD1124BADD3862A1394617E341256F2D056777F07A82D14B42E22B3586A5E05BC16F79CFD751829464B6997C213F030A28CF45809281323915B67D8C695ACC7CC37DE77249BE624C16BA183FCBD8E476F4BAEB1E2467EA45D6D43D94C48E9D69EE27988B781683604D17CFFFEEEEC25D1E52608D55FE82D602468BCBB72CB1952BC9D56C3299E27CA585835204A9C5B5FD1F9A5236490BCFC9B6B536A5568CF0A5D273D4AFC0151C64A4BA464001286FE3AD0EAB70D8C87FBD6BCC47BC6E449ACC2EABDFD339DED9553B808E58BCCB3F024FA75968BFCB5EA020B9AC7055FDCAFAB3B314090C1DD2D88F86383F5768840B71FDCFA6C7FF29EE7256BB86DB4AE7D57D57827",
            "0x424BFD6EA3ADC99AF84B2F6406C90D6C3AC841752B016702E2347990B85E2013634BCA89092763F94A3C54EB1B2E3787CA537D9ADD0602475B1B5BFBF68819BB65908A9C33D821CBCE3FE9919A1DC032DBB38D3533CCE62DF28BC8774A6044EE7F88C685A71C2098D6EFF6AC204436346289761AB91553A809D7DC5DFA7E0B4A24A99F43E66CCE3D9C631F1ED9ED4DA14464B3921DEC061352DAA7093CA34F04CE5EFF06F47385D401AD413CA463382656F73A58AD4F6D55A0EAA8234CA67F258F31C0EEBB63617A3B59EFB1606082006417B50F00232CF74496E3A43D6EF150D7A4947761917BD5AA2DD02AEADE8E5C761B09307EE673111AE44932E5CE1DCB821364577F69CAC4C8FB2B3158449AADAD06933B5D56973FEA112781BD617EA66B308ECF2197C4693E6CF56D5F06ABCDED20F9A70D7E8FB071B57C7009142C17AC0FB24C4EDD4780095FE3E9A7C463105EE15D88D0AF3DB266FCCB2FFE8521A4F0E13A0901CA70824D579C6817F022E1EF520F718AFB999750F46DFCD23EB9E2",
        ];
        let gs: Vec<Integer> = bases
            .iter()
            .map(|e| Integer::from_hexa_string(e).unwrap())
            .collect();
        let statement = [
            "0x
            "0x329E07B476E4F0F97BD3DAE33757A621DD589C990AAA9CB14FA7E498A3280C2C59E3A518FBE75753AF142490897B796E0C594CF1C767A5511C46877946CE8135BDFB5FAFDD0FE998F91F46B966870AE332D47C5B37158EE3525A9C68D3DB01BE2894BD9D1171F77F70B8FA3193A68B78E2FF507F45F228DE696AB6F86C6232E781BF6E905E4A7CAF1E31398499C55622F89468597307702854CA5876A3D93BE29F4F996FDEFED23FFDC904CDB781A1F5E833AF1FBB2349E83D05BC401DADA2CCC58A3768A9B1B413DEA7D0F69BB991F658C7C3E0BDA5F570D5FA907E0EF6099406B02BD4EC1E75C4DDACA675C396F6E6E7026F38CBA0CCF7B74CBA6D3263B4BC7B1D4D348C6C7A84A7B7B31FEECF2C307132E65B37C345E7CA1D8C213E6D0AA99393BE1AF87220CD30F39A465DAF1CDF4274991BD4DC27FD09BB214B16D68B1FAD233D2ED25B559F6CB98C407CD0104F0CA2B198CE353B3869042F1C9750DCF0671A2CCB5ADFF120244B0828F86873F14C975ECCC17E8A797A6122AAE89AECE4",
        ];
        let ys: Vec<Integer> = statement
            .iter()
            .map(|e| Integer::from_hexa_string(e).unwrap())
            .collect();
        let e = Integer::from_hexa_string(
            "0xB1EA73A8BE45C17E6416A8FB86D326C580A86FE31958D4A7F7FC76E9981CB690",
        )
        .unwrap();
        let z = Integer::from_hexa_string(
            "0x
        ).unwrap();
        let add_info: Vec<String> = vec!["test-0".to_string(), "test-1".to_string()];
        assert!(verify_exponentiation(
            &EncryptionParameters::from((&p, &q, &g)),
            gs.iter().collect::<Vec<_>>().as_slice(),
            ys.iter().collect::<Vec<_>>().as_slice(),
            (&e, &z),
            &add_info
        )
        .unwrap())
    }

    #[test]
    fn test_verify_exp_3072_7() {
        let p = Integer::from_hexa_string(
            "0x
        ).unwrap();
        let q = Integer::from_hexa_string(
            "0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B"
        ).unwrap();
        let g = Integer::from_hexa_string("0x4").unwrap();
        let bases = [
            "0x
            "0x51996FCA06E00A3671C965F20BA15F965C7F41F5D2A016CAD60F782FCA80772D09A0FE6F1E56FB014830F218AFC0DA9DFEA17B91DFCBC569E7556BBD5C72E42F67B72AFFB50DCAAF2E83A64A37DED91135366055EB0245D38BCCC87851A3513968CB93CD6C3D8DE0BED1752A73051E7B69C17BB6707C45CBD5F33F722D25653FA512C2EC32566F9D5D63237A754979E315ABCC7D3DC992AAB9B472518F8E2134A581754BA60DDF8F4773CDE6DE913DC1E7F2EA750EBE5ED836369FE5C4DE495E7009BCF17EDD9292D623990C0236AF60437E0ACDB49A2FD24657B2EA1E0B9530E262CD7563DEE6AE96604A3D9AB127B04B52C7C9771C653800A4C841F7673256E1FE67944FFDBA49411D3FFDCA0C1BEC30B9E173BC1BA42ADB6B7DBBA9606E5B51B5317E01DF0876BE41C4A653FF2F6CBFBBE5A11BE83129B1F0D4835D2F63BED3C890234BF2161A9D9EE14239E16040048CD0F7A3CF47B3047756FA8E5236FF7082CB0EA1ED8B04A27B970487C3846069EC4B0485662D9389A3F4231E05316B",
            "0x10068C5812CF679CE4C0FE28E39F18EF13CD44D8A3E4D218760E6BE35AAA1F7E3F00A1E16F6428699A6B6C0EF9A889E1E5D493FDB054AB75351E9910C38C87AF37DF9A0FBCEF4916B562765A1EA7C2DDCBADBFC81CDFE6A922B987E3FA8C3C8D878C4768475586AE710DE6224732565BAC1043C96DDAF76784A9B95DF0A544744CA10F0DC68A596DD1E89412715B60A34E00FADA7F7B98EC68F2F364C7FAE9C0BE3DAB32F0C4200C7DEA64E599E0BC89BE71F22E1600974BF69865A6D9C59620108AC275A9FBD41AB6ADA59CF8C8D7ACE02241E34F269F2C27A84D83AEE49F3FB6EEFEC91C4585E42249776DC4A92C1E212A720BD3B20AD943A57B3C08A197CFD13C0872FF83BC134C78286D0153D46AFFDFBDA029903CB967E9BE2A75A31582CAF9B8BB23DF0CE0622DC948FA02839026C3EBAB800EB16FAFF9E6AAC8787066588C25DE35B877FFF8701F89B69B1CEFF97E46C1147DB87A5778B6561A93B600ADCE21734B4F9E6EA64B07F25ECB17BA84A56BE7875A183D04DA420425B36C55",
            "0x
            "0x65FC627DBA256E8FBAA214E5BFC765951F0BF70D87790CB9CCCF43B16B1DD1EF3CD9AE32F929D2DE224A708CFB987C6316E0904D39E802B0C2890DBF0EDDC7C5E1B3DEA219DFF9B6D2CCDE61738F8F8D8DEF60A6CE605AD445E69985EF52D4DDAF458CEB034A63BDB3356F96D9BE30D3C654EEC4C97B7C4EE8226C2494466A65B382A62E659E3544D2836661F00E14CB6979EEB857918993A10A81CE9180DEFE499D161B4B0A71B3D9E26290F3CED598BB5511AD8D681E1E064F344AABB300284CC6C4096EA3B8E00241FDA017451FE6542BAA07A56CD33E66DA983C627B7660D6CC270276BF4A3B205DDE5EFCCA32FCAF163678BAE87F9B32146C1DD255CD9F4A04DDD7CA7C728652EFBFCE6E921A05EB09A8E171BF1B03FFA13713DD642FACDDEA3DF2E032FB344A52600F7EC5A3FAA97A542F4CC6DE97C5F7371C7A02E6D0996376E292183785E6EE544A4AA8E1DE41694A3A25259D2122251A6D534A5608C919AB238061CE5EE778E0A9418101EED7A7C775BB02FEB0B315F76C92F670D3",
            "0xA002CC6721E036B6117DF3E5FBF14502AFEDDA1B1B61C221DF7BDFA44E3C3B9BDD82D6E2732430769237919B7BB35251BB10EEC7440DBE2DD2D2A05292C56B456D57C83F0B1E24E5C5CCA6CB2DED1EF1978BF0894ECC33FDE413FF7454634CF9C5CCEFCAA58B26E44FCBF45F039582C7752118CE5F8093575BD4E4BC5563C5FF7330BA959B6022CEA7A479FF66D41D6B4BF94C948D443FE53294A64F6530B7FE7AC919A92BDCF4786DAE7D43B3F93F9D1CA196F6D2DE2B25ECC943F0FA6BCC1723C08912628D95EEF0E8EDA19DFBBFFFE4F84676A10EB32751033BCB025C201A26C1BE4D6478A5913569C140DBC7BD596317E024FAA827939DB7E8740138661F60F0F90FFF061F6A12053769C89B805B05712F01D6137545F048EC6BD649EE0AF3098BCEAB6C958492F541F591F4BB7308D3E6D85861E1E6410C0BF175A552583471D82294D978C151C601E626C3F8303DE710322F4646DABB348247C5442C5763E04B402229702E643D01A39A769619FC5FC50EF091D4D508A1562B6D8543C8",
            "0x
        ];
        let gs: Vec<Integer> = bases
            .iter()
            .map(|e| Integer::from_hexa_string(e).unwrap())
            .collect();
        let statement = [
            "0x
            "0x
            "0x
            "0x71C7C3E78423C749C02E95AEACFA73C1A7E9B1C39DA578F7DE33C900ACA41E94AEBFD465AA61C1E0BDDD6181D6501FB101BD08F414103DF0F21C94093580DF6B02682B71A5F97DE1D3375C4A1929026AFE20B9A1D000A8C0A3FAB3793278B00847AB6B6742107A1408010C099AEC6B306C56CA4B661EF7816FCE8DF818C1D50E5473C53AC9824A63CFFEACF13527E73972F557A2AE4B4FB4B0006FDC3CCD9F6B67EFD8C19A217331D01AA836AE54F00D1C24724CCA6D7D37A7F663B39AB1E83E1A3CFADF4A84F695DA8BBD795E4519F843AF25235D985AAF91CC90443C9EBD0FB59E90CDA6B279825687D82A21115D01C8889992573EDA7A8878AF8609B61E43FC74E0C15F0569B6669A7FAE2376D6549AB25D5ED19EEE90D98661F93EE6290675F642A67C051355B27C7DACABC47FFFA894FBB590B20D3B9FF3A17789ACA1FE77B5254625AE794C41F0D7CCF39F1DD263230C1324A8689362FE051636DA4A3775090FF09C507A7A95BA50C13228A407E01F9E417EB732080B66E934253531CC",
            "0xAADD5A3FDA41E6AD819CD2B159C3270EFBE2EA800E1F528BD8C3AAD3D07200683E25FED9B16A07540C2E4248ECB9C897A6F3DA116ADEB7BDC3F82EE7B6FCE56026C0DA41DCCDA4562491501F991F43045A9F8536C7481C77EF36DE83B024935C53329F1053F6F5C04943727F3A4295F0DC3A4C994AD99BC56563379AE42CD799F781D3EE534F3211ECBB72530AD8A54BA2EDA76ECEBA20C6C2000C48DF8683BF5F3F76700F0997319DDD799BB779105F9DB0B161CE64700761935FC3A25037C11420029B913D4FA43120875F9168C6880526C28CA596AD9AEF90D0535588B1D1B6FD892E68D631E6E5E4933F90DDCDA8E1D0791B9D6CD8F47B27E4A1194A7FAD48F56B620E2602494A05C28649F3AD4416F32444B3396EFD197D0722FA1794621C08C80760C3A41EDD2B6A2F6A4EDD91B4DCEEEA420164A56034E0FEC4F876A078C272EA7595084B8AEFEDF5B91458FC3858DA7E733B94BEF5DF77409781B4B59FFA1274D139E655EEC6AAA2F8B7F57134FA7C9EA0C4DC861D3E617104AEECA8",
            "0x
            "0x23049B3CBF31FF70147DBF241A712C3E0BD793BE2D320DA03B36E4DB32B465D33FDF4EB3141FD185F5C46FF1F332596A33C7E5B3902D3AA4626BB09219F4C68B5799FBDD3FC4EB778E009E24275E46C190C9DDE9B9D6C9B7225E6C30970B95F2A70745113101183A387BF556A18FBE347749712F1C0989168F89AAFD5579A74106AD6D3470AADDB90AAFB9060A32EA940C8F277745FCD58AAD986D882AC1CC3CE0440BBD41DF25BB35DCF74FFF0E1472B0E296AE65311BABE7DB612A6D8FEC1531647281BA7E38010420DE292E8A23E0561A1CC77E7D44106D7BEF8257097A3B9CB57CE6080E445169C1901B9E7657D2AF3FE76C025833271C24727EEDF86ECE1C0D9A9A6FAD196F343AE2F07901C0D20B28290CD78CA67C4CDCFA708B1F4375E871CDD11AEF864481EB9F25FC535A5AFB282121A1555C175A50A9D4FE8A24F88CFBC3778B4B4BF44CF39D1046DA6034C52A31D12B9398E0B3198D1DEC093AB8B5024BEB1BEB5EE4C788295BEA483BCB144CD35853C77F17F501BA19BDFBA11E",
        ];
        let ys: Vec<Integer> = statement
            .iter()
            .map(|e| Integer::from_hexa_string(e).unwrap())
            .collect();
        let e = Integer::from_hexa_string(
            "0xB5706811B59D6CE68F85A5F84C87FEA0A259DADDC0EDDD2CE43ABF73AE26F0BD",
        )
        .unwrap();
        let z = Integer::from_hexa_string(
            "0x
        ).unwrap();
        let add_info: Vec<String> = vec!["test-0".to_string(), "test-1".to_string()];
        assert!(verify_exponentiation(
            &EncryptionParameters::from((&p, &q, &g)),
            gs.iter().collect::<Vec<_>>().as_slice(),
            ys.iter().collect::<Vec<_>>().as_slice(),
            (&e, &z),
            &add_info
        )
        .unwrap())
    }
}
